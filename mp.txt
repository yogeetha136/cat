  sudo apt update
 sudo apt install mpich
 mpiexec -version
nano pg1.c
#include "mpi.h" 
#include <stdio.h> 
int main(int argc, char *argv[]) 
{ 
MPI_Init(&argc, &argv); // Initialize MPI 
printf("Hello, world!\n"); // Print message 
MPI_Finalize(); // Finalize MPI 
return 0; // Return 0 to indicate successful 
execution 
}
compile : mpicc -o pg pg1.c
run : mpiexec -n 4 ./pg

nano pg2.c
#include <mpi.h> 
#include <stdio.h> // For printf 
#include <stdlib.h> // For exit 
int main(int argc, char *argv[]) 
{ 
const int tag = 42; /* Message tag */ 
int id, ntasks, source_id, dest_id, err, i; 
MPI_Status status; 
int msg[2]; /* Message array */ 
err = MPI_Init(&argc, &argv); /* Initialize MPI */ 
if (err != MPI_SUCCESS) { 
printf("MPI initialization failed!\n"); 
exit(1); 
} 
err = MPI_Comm_size(MPI_COMM_WORLD, 
&ntasks); /* Get number of tasks */ 
err = MPI_Comm_rank(MPI_COMM_WORLD, 
&id); /* Get id of this process */ 
if (ntasks < 2) { 
printf("You have to use at least 2 processors to 
run this program\n"); 
MPI_Finalize(); /* Quit if there is only one 
processor */ 
exit(0); 
} 
if (id == 0) { /* Process 0 (the receiver) does this 
*/ 
for (i = 1; i < ntasks; i++) { 
err = MPI_Recv(msg, 2, MPI_INT, 
MPI_ANY_SOURCE, tag, MPI_COMM_WORLD, 
&status); /* Receive a 
message */ 
source_id = status.MPI_SOURCE; /* Get id of 
sender */ 
printf("Received message %d %d from process 
%d\n", msg[0], msg[1], source_id); 
} 
} else { /* Processes 1 to N-1 (the senders) do 
this */ 
msg[0] = id; /* Put own identifier in the message 
*/ 
msg[1] = ntasks; /* and total number of 
processes */ 
dest_id = 0; /* Destination address */ 
err = MPI_Send(msg, 2, MPI_INT, dest_id, tag, 
MPI_COMM_WORLD); 
} 
err = MPI_Finalize(); /* Terminate MPI */ 
if (id == 0) { 
printf("Ready\n"); 
} 
exit(0); 
return 0; 
} 


nano pg3.c
#include <mpi.h> 
#include <stdio.h> 
int main(int argc, char *argv[]){ 
MPI_Init(&argc, &argv); 
int world_size; 
MPI_Comm_size(MPI_COMM_WORLD, 
&world_size);//retrieves the process 
int world_rank; 
 
MPI_Comm_rank(MPI_COMM_WORLD, 
&world_rank);//rank of the process 
printf("Hello from rank %d out of %d 
processors\n", world_rank, world_size); 
}


nano pg4.c

#include <mpi.h>
#include <stdio.h>

int main(int argc, char **argv) {
    int rank, size, n;
    double pi = 0.0, local_sum = 0.0;

    // Initialize MPI environment
MPI_Init(&argc, &argv);
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (rank == 0) {
        // Input number of terms
printf("Enter the number of terms: ");
scanf("%d", &n);
    }

    // Broadcast the number of terms to all processes
MPI_Bcast(&n, 1, MPI_INT, 0, MPI_COMM_WORLD);

    // Each process calculates its partial sum
    for (int i = rank; i< n; i += size) {
        double term = 4.0 / (2 * i + 1);
        if (i % 2 == 0) {
local_sum += term; // Add if i is even
        } else {
local_sum -= term; // Subtract if i is odd
        }
    }

    // Reduce all local sums to get the final value of pi in rank 0
MPI_Reduce(&local_sum, &pi, 1, MPI_DOUBLE, MPI_SUM, 0, MPI_COMM_WORLD);

    // Output result in process 0
    if (rank == 0) {
printf("Approximate value of pi: %f\n", pi);
    }

    // Finalize MPI environment
MPI_Finalize();
    return 0;
}

